import time
import random
from multiprocessing import Process, Pipe
import argparse
import sys
import os
import tqdm
from datetime import datetime

# Argument parsing
parser = argparse.ArgumentParser(description='Buzzword Bingo Spiel.')
parser.add_argument('-xaxis', type=int, required=True, help='Anzahl der Felder in der Breite')
parser.add_argument('-yaxis', type=int, required=True, help='Anzahl der Felder in der Höhe')
parser.add_argument('-wordfile', type=str, required=True, help='Pfad zur Textdatei mit den Wörtern')
args = parser.parse_args()

LOG_DIR = "logs"

def read_words_from_file(filepath):
    """Read words from a file and return them as a list."""
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            words = [line.strip() for line in file if line.strip()]
        return words
    except FileNotFoundError:
        print(f"Error: File {filepath} not found.")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file {filepath}: {e}")
        sys.exit(1)


def welcome_screen():
    """Display a welcome screen."""
    print("****************************************")
    print("*                                      *")
    print("*          Willkommen!                 *")
    print("*                                      *")
    print("*     Das Spiel wird geladen...        *")
    print("*                                      *")
    print("****************************************")
    time.sleep(2)


def loading_animation(duration=5):
    """Display a loading animation."""
    for _ in tqdm.tqdm(range(101), desc="Laden", ncols=100, unit="%", ascii=True,
                       bar_format="{desc}: |{bar}| {percentage:3.0f}%"):
        time.sleep(duration / 100)


def create_bingo_card(words, width, height):
    """Create a bingo card with given words, width, and height."""
    random.shuffle(words)
    card = [words[i * width:(i + 1) * width] for i in range(height)]
    if width == height and width in [5, 7]:
        middle_index = width // 2
        card[height // 2][middle_index] = "X"  # Ensure middle cell is marked
    return card


def print_bingo_card(card):
    """Print the bingo card in a table format with 'X' for marked words."""
    max_word_length = max(len(word) for row in card for word in row)
    for row in card:
        line = "+".join(["-" * (max_word_length + 2)] * len(row))
        print(f"+{line}+")
        for word in row:
            display_word = "X" if word == "X" else word
            print(f"| {display_word.center(max_word_length)} ", end="")
        print("|")
    line = "+".join(["-" * (max_word_length + 2)] * len(card[0]))
    print(f"+{line}+")


def check_win(card):
    """Check if there is a win condition in the bingo card."""
    # Check rows
    for row in card:
        if all(cell == "X" for cell in row):
            return True
    # Check columns
    for col in range(len(card[0])):
        if all(row[col] == "X" for row in card):
            return True
    # Check diagonals
    if all(card[i][i] == "X" for i in range(len(card))):
        return True
    if all(card[i][len(card) - 1 - i] == "X" for i in range(len(card))):
        return True
    return False


def player_process(pipe, player_num, width, height, words):
    """Process for each player to handle their bingo card and actions."""
    name, _ = pipe.recv()  # Receive player name, ignore age
    bingo_card = create_bingo_card(words, width, height)
    pipe.send(bingo_card)

    while True:
        word = pipe.recv()
        response = pipe.recv()

        if response.lower() == 'j':
            marked = False
            mark_row = -1
            mark_col = -1

            for i in range(height):
                for j in range(width):
                    if bingo_card[i][j] == word:
                        bingo_card[i][j] = "X"
                        marked = True
                        mark_row = i
                        mark_col = j
                        break
                if marked:
                    break

            pipe.send((player_num, word, check_win(bingo_card), mark_row, mark_col))
        else:
            pipe.send(None)

        # Send updated card back to main process
        pipe.send(bingo_card)

        # Ask if player wants to undo their decision
        undo_response = pipe.recv()
        if undo_response.lower() == 'j' and response.lower() == 'j':
            # Undo marking
            bingo_card[mark_row][mark_col] = word

        # Log current action
        timestamp = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
        log_message = f"{timestamp} Wort {word} markiert"
        write_to_log(player_num, log_message)

def write_to_log(player_num, message):
    """Write a message to the log file for a specific player."""
    timestamp = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
    filename = os.path.join(LOG_DIR, f"bingo-Spieler{player_num}.txt")
    with open(filename, 'a') as log_file:
        log_file.write(message + "\n")

def save_logs_to_file():
    """Save all player logs to a single file."""
    log_files = [f for f in os.listdir(LOG_DIR) if f.endswith('.txt') and f.startswith('bingo-Spieler')]

    if not log_files:
        print("Keine Log-Dateien gefunden.")
        return

    with open(os.path.join(LOG_DIR, 'Log-Datei.txt'), 'w') as output_file:
        output_file.write("Zusammengeführte Log-Datei\n")
        output_file.write("=" * 50 + "\n\n")

        for log_file in log_files:
            output_file.write(f"Log-Datei: {log_file}\n")
            output_file.write("=" * 50 + "\n")
            with open(os.path.join(LOG_DIR, log_file), 'r') as input_file:
                output_file.write(input_file.read())
            output_file.write("\n\n")

def main():
    welcome_screen()
    loading_animation()

    # Spielerdaten abfragen
    player1_name, player1_age = get_player_data(1)
    player2_name, player2_age = get_player_data(2)

    print(f"\nSpieler 1: Name = {player1_name}, Alter = {player1_age}")
    print(f"Spieler 2: Name = {player2_name}, Alter = {player2_age}")

    # Bingokarten erstellen
    card1 = create_bingo_card(buzzwords, 5, 5)
    card2 = create_bingo_card(buzzwords, 5, 5)

    print("\nSpieler 1 Bingokarte:")
    print_bingo_card(card1)

    print("\nSpieler 2 Bingokarte:")
    print_bingo_card(card2)

    buzzword_bingo_screen()

    # Spielablauf
    winner = None
    while not winner:
        # Spieler 1 ist an der Reihe
        print(f"\n{player1_name} ist an der Reihe:")
        if play_buzzword_bingo(player1_name, card1):
            winner = player1_name
            break

        # Spieler 2 ist an der Reihe
        print(f"\n{player2_name} ist an der Reihe:")
        if play_buzzword_bingo(player2_name, card2):
            winner = player2_name
            break

    print(f"\nHerzlichen Glückwunsch, {winner} hat gewonnen!")

if __name__ == "__main__":
    main()
