import time
import random
import argparse
import sys
import os
import tqdm

# Argument parsing
parser = argparse.ArgumentParser(description='Buzzword Bingo Spiel.')
parser.add_argument('-xaxis', type=int, required=True, help='Anzahl der Felder in der Breite')
parser.add_argument('-yaxis', type=int, required=True, help='Anzahl der Felder in der Höhe')
parser.add_argument('-wordfile', type=str, required=True, help='Pfad zur Textdatei mit den Wörtern')
args = parser.parse_args()

def read_words_from_file(filepath):
    """Read words from a file and return them as a list."""
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            words = [line.strip() for line in file if line.strip()]
        return words
    except FileNotFoundError:
        print(f"Error: File {filepath} not found.")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file {filepath}: {e}")
        sys.exit(1)


def welcome_screen():
    """Display a welcome screen."""
    print("****************************************")
    print("*                                      *")
    print("*          Willkommen!                 *")
    print("*                                      *")
    print("*     Das Spiel wird geladen...        *")
    print("*                                      *")
    print("****************************************")
    time.sleep(2)


def loading_animation(duration=5):
    """Display a loading animation."""
    for _ in tqdm.tqdm(range(101), desc="Laden", ncols=100, unit="%", ascii=True,
                       bar_format="{desc}: |{bar}| {percentage:3.0f}%"):
        time.sleep(duration / 100)


def create_bingo_card(words, width, height):
    """Create a bingo card with given words, width, and height."""
    random.shuffle(words)
    card = [words[i * width:(i + 1) * width] for i in range(height)]
    if width == height and width in [5, 7]:
        middle_index = width // 2
        card[height // 2][middle_index] = "X"  # Ensure middle cell is marked
    return card


def print_bingo_card(card):
    """Print the bingo card in a table format with 'X' for marked words."""
    max_word_length = max(len(word) for row in card for word in row)
    for row in card:
        line = "+".join(["-" * (max_word_length + 2)] * len(row))
        print(f"+{line}+")
        for word in row:
            display_word = "X" if word == "X" else word
            print(f"| {display_word.center(max_word_length)} ", end="")
        print("|")
    line = "+".join(["-" * (max_word_length + 2)] * len(card[0]))
    print(f"+{line}+")


def mark_word_on_card(card, word):
    for i, row in enumerate(card):
        if word in row:
            j = row.index(word)
            card[i][j] = "X"  # Markierung des Wortes auf der Bingokarte mit "X"

def check_win_condition(card):
    # Überprüfung auf 5 durchgestrichene Wörter in horizontalen Reihen
    for row in card:
        if all([cell == "X" for cell in row]):
            return True

    # Überprüfung auf 5 durchgestrichene Wörter in vertikalen Reihen
    for col in range(len(card[0])):
        if all([card[row][col] == "X" for row in range(len(card))]):
            return True

    # Überprüfung auf 5 durchgestrichene Wörter in diagonalen Reihen (von links oben nach rechts unten)
    if all([card[i][i] == "X" for i in range(len(card))]):
        return True

    # Überprüfung auf 5 durchgestrichene Wörter in diagonalen Reihen (von rechts oben nach links unten)
    if all([card[i][len(card)-1-i] == "X" for i in range(len(card))]):
        return True

    return False

def play_buzzword_bingo(player_name, card):
    for word in buzzwords:
        print(f"\nNächstes Wort: {word}")
        input("Drücken Sie Enter, um fortzufahren...")

        mark_word_on_card(card, word)
        print(f"\nAktuelle Bingokarte von {player_name}:")
        print_bingo_card(card)

        if check_win_condition(card):
            return True

    return False

def main():
    welcome_screen()
    loading_animation()

    # Spielerdaten abfragen
    player1_name, player1_age = get_player_data(1)
    player2_name, player2_age = get_player_data(2)

    print(f"\nSpieler 1: Name = {player1_name}, Alter = {player1_age}")
    print(f"Spieler 2: Name = {player2_name}, Alter = {player2_age}")

    # Bingokarten erstellen
    card1 = create_bingo_card(buzzwords, 5, 5)
    card2 = create_bingo_card(buzzwords, 5, 5)

    print("\nSpieler 1 Bingokarte:")
    print_bingo_card(card1)

    print("\nSpieler 2 Bingokarte:")
    print_bingo_card(card2)

    buzzword_bingo_screen()

    # Spielablauf
    winner = None
    while not winner:
        # Spieler 1 ist an der Reihe
        print(f"\n{player1_name} ist an der Reihe:")
        if play_buzzword_bingo(player1_name, card1):
            winner = player1_name
            break

        # Spieler 2 ist an der Reihe
        print(f"\n{player2_name} ist an der Reihe:")
        if play_buzzword_bingo(player2_name, card2):
            winner = player2_name
            break

    print(f"\nHerzlichen Glückwunsch, {winner} hat gewonnen!")

if __name__ == "__main__":
    main()
