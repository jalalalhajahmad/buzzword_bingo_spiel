import time
import random
from multiprocessing import Process, Pipe
import argparse
import sys
import os
import tqdm
from datetime import datetime
import colorama
from colorama import Fore, Style


# Importiere das Modul argparse, um Befehlszeilenargumente zu parsen
import argparse

# Erstelle einen ArgumentParser-Objekt mit einer Beschreibung des Programms
parser = argparse.ArgumentParser(description='Buzzword Bingo Spiel.')

# Füge ein Argument hinzu, um die Anzahl der Felder in der Breite zu spezifizieren
parser.add_argument('-xaxis', type=int, required=True, help='Anzahl der Felder in der Breite')

# Füge ein Argument hinzu, um die Anzahl der Felder in der Höhe zu spezifizieren
parser.add_argument('-yaxis', type=int, required=True, help='Anzahl der Felder in der Höhe')

# Füge ein Argument hinzu, um den Pfad zur Textdatei mit den Wörtern zu spezifizieren
parser.add_argument('-wordfile', type=str, required=True, help='Pfad zur Textdatei mit den Wörtern')

# Parse die Argumente, die über die Befehlszeile übergeben wurden
args = parser.parse_args()

# Nun können die Argumente args.xaxis, args.yaxis und args.wordfile im Programm verwendet werden


LOG_DIR = "logs"

def read_words_from_file(filepath):
    """Liest Wörter aus einer Datei und gibt sie als Liste zurück."""
    try:
        # Öffne die Datei im Lesemodus mit UTF-8-Kodierung
        with open(filepath, 'r', encoding='utf-8') as file:
            # Lies jede Zeile der Datei, entferne führende und nachgestellte Leerzeichen
            # und füge sie der Liste hinzu, wenn sie nicht leer ist
            words = [line.strip() for line in file if line.strip()]
        return words  # Gib die Liste der Wörter zurück
    except FileNotFoundError:
        # Behandle den Fall, dass die Datei nicht gefunden wurde
        print(f"Error: File {filepath} not found.")
        sys.exit(1)  # Beende das Programm mit einem Fehlerstatus
    except Exception as e:
        # Behandle alle anderen Ausnahmen, die beim Lesen der Datei auftreten können
        print(f"Error reading file {filepath}: {e}")
        sys.exit(1)  # Beende das Programm mit einem Fehlerstatus

def welcome_screen():
    """Zeigt einen stilvollen Begrüßungsbildschirm an."""
    print(Fore.YELLOW + r"""
██████╗ ██╗   ██╗███████╗███████╗██╗    ██╗ ██████╗ ██████╗ ██████╗     ██████╗ ██╗███╗   ██╗ ██████╗  ██████╗ 
██╔══██╗██║   ██║╚══███╔╝╚══███╔╝██║    ██║██╔═══██╗██╔══██╗██╔══██╗    ██╔══██╗██║████╗  ██║██╔════╝ ██╔═══██╗
██████╔╝██║   ██║  ███╔╝   ███╔╝ ██║ █╗ ██║██║   ██║██████╔╝██║  ██║    ██████╔╝██║██╔██╗ ██║██║  ███╗██║   ██║
██╔══██╗██║   ██║ ███╔╝   ███╔╝  ██║███╗██║██║   ██║██╔══██╗██║  ██║    ██╔══██╗██║██║╚██╗██║██║   ██║██║   ██║
██████╔╝╚██████╔╝███████╗███████╗╚███╔███╔╝╚██████╔╝██║  ██║██████╔╝    ██████╔╝██║██║ ╚████║╚██████╔╝╚██████╔╝
╚═════╝  ╚═════╝ ╚══════╝╚══════╝ ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═════╝     ╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝  ╚═════╝ 
                                                                                                               
                                                                                                                                                


""" + Style.RESET_ALL)
    print(Fore.YELLOW + r"""

██╗    ██╗██╗██╗     ██╗     ██╗  ██╗ ██████╗ ███╗   ███╗███╗   ███╗███████╗███╗   ██╗██╗                            
██║    ██║██║██║     ██║     ██║ ██╔╝██╔═══██╗████╗ ████║████╗ ████║██╔════╝████╗  ██║██║                            
██║ █╗ ██║██║██║     ██║     █████╔╝ ██║   ██║██╔████╔██║██╔████╔██║█████╗  ██╔██╗ ██║██║                            
██║███╗██║██║██║     ██║     ██╔═██╗ ██║   ██║██║╚██╔╝██║██║╚██╔╝██║██╔══╝  ██║╚██╗██║╚═╝                            
╚███╔███╔╝██║███████╗███████╗██║  ██╗╚██████╔╝██║ ╚═╝ ██║██║ ╚═╝ ██║███████╗██║ ╚████║██╗                            
 ╚══╝╚══╝ ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝╚═╝                            
                                                                                                                     
██████╗  █████╗ ███████╗    ███████╗██████╗ ██╗███████╗██╗         ██╗      █████╗ ███████╗██████╗ ████████╗         
██╔══██╗██╔══██╗██╔════╝    ██╔════╝██╔══██╗██║██╔════╝██║         ██║     ██╔══██╗██╔════╝██╔══██╗╚══██╔══╝         
██║  ██║███████║███████╗    ███████╗██████╔╝██║█████╗  ██║         ██║     ███████║█████╗  ██║  ██║   ██║            
██║  ██║██╔══██║╚════██║    ╚════██║██╔═══╝ ██║██╔══╝  ██║         ██║     ██╔══██║██╔══╝  ██║  ██║   ██║            
██████╔╝██║  ██║███████║    ███████║██║     ██║███████╗███████╗    ███████╗██║  ██║███████╗██████╔╝   ██║   ██╗██╗██╗
╚═════╝ ╚═╝  ╚═╝╚══════╝    ╚══════╝╚═╝     ╚═╝╚══════╝╚══════╝    ╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝    ╚═╝   ╚═╝╚═╝╚═╝
                                                                                                                     

 """+ Style.RESET_ALL)
    time.sleep(2)


def loading_animation(duration=5):
    """Zeigt eine Ladeanimation an."""
    for _ in tqdm.tqdm(range(101), ncols=100, unit="🔳", ascii=False,
                       bar_format="{desc}: {bar} {percentage:3.0f}%",
                       colour='green'):
time.sleep(duration / 200)


def create_bingo_card(words, width, height):
    """Erstellt eine Bingokarte mit den angegebenen Wörtern, der Breite und der Höhe."""
    random.shuffle(words)
    card = [words[i * width:(i + 1) * width] for i in range(height)]
    if width == height and width in [5, 7]:
        middle_index = width // 2
        card[height // 2][middle_index] = "X"  # Ensure middle cell is marked
    return card


def print_bingo_card(card):
    """Druckt die Bingokarte in Tabellenformat und ersetzt markierte Wörter durch 'X'."""
    max_word_length = max(len(word) for row in card for word in row)
    for row in card:
        line = "+".join(["-" * (max_word_length + 2)] * len(row))
        print(f"+{line}+")
        for word in row:
            display_word = "X" if word == "X" else word
            print(f"| {display_word.center(max_word_length)} ", end="")
        print("|")
    line = "+".join(["-" * (max_word_length + 2)] * len(card[0]))
    print(f"+{line}+")


def check_win(card):
   """Überprüft, ob es eine Gewinnbedingung auf der Bingokarte gibt."""
    # Überprüft die Reihen auf eine Gewinnbedingung
    for row in card:
        if all(cell == "X" for cell in row):
            return True
    # Überprüft die Spalten auf eine Gewinnbedingung
    for col in range(len(card[0])):
        if all(row[col] == "X" for row in card):
            return True
    # Überprüft die erste Diagonale (oben links nach unten rechts) auf eine Gewinnbedingung
    if all(card[i][i] == "X" for i in range(len(card))):
        return True
    # Überprüft die zweite Diagonale (oben rechts nach unten links) auf eine Gewinnbedingung
    if all(card[i][len(card) - 1 - i] == "X" for i in range(len(card))):
        return True
    return False


def player_process(pipe, player_num, width, height, words):
    """Prozess für jeden Spieler, um ihre Bingokarte und Aktionen zu verwalten."""
    # Empfängt den Spielernamen vom Hauptprozess über die Pipe (Alter wird ignoriert)
    name, _ = pipe.recv()  # Receive player name, ignore age

    # Erstellt eine Bingokarte für den Spieler mit den bereitgestellten Wörtern, Breite und Höhe
    bingo_card = create_bingo_card(words, width, height)

    # Sendet die erstellte Bingokarte zurück an den Hauptprozess
    pipe.send(bingo_card)

    while True:
        # Empfängt ein Wort vom Hauptprozess
        word = pipe.recv()
        # Empfängt die Antwort des Spielers, ob das Wort markiert werden soll
        response = pipe.recv()

        if response.lower() == 'j': # Wenn die Antwort 'j' ist, markiere das Wort auf der Karte
            marked = False
            mark_row = -1
            mark_col = -1

            # Findet und markiert das Wort auf der Bingokarte
            for i in range(height):
                for j in range(width):
                    if bingo_card[i][j] == word:
                        bingo_card[i][j] = "X"
                        marked = True
                        mark_row = i
                        mark_col = j
                        break
                if marked:
                    break

            # Sendet die Spielernummer, das Wort, den Gewinnstatus und die Position des markierten Wortes zurück
            pipe.send((player_num, word, check_win(bingo_card), mark_row, mark_col))
        else:
            # Wenn die Antwort nicht 'j' ist, sende None
            pipe.send(None)

        # Sendet die aktualisierte Bingokarte zurück an den Hauptprozess
        pipe.send(bingo_card)

        # Fragt, ob der Spieler seine Entscheidung rückgängig machen möchte
        undo_response = pipe.recv()
        if undo_response.lower() == 'j' and response.lower() == 'j':
            # Hebt die Markierung auf, wenn der Spieler sich entscheidet, rückgängig zu machen
            bingo_card[mark_row][mark_col] = word

        # Protokolliert die aktuelle Aktion mit einem Zeitstempel
        timestamp = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
        log_message = f"{timestamp} Wort {word} markiert"
        write_to_log(player_num, log_message)

# Writes a message to the log file for a specific player
def write_to_log(player_num, message):
    """Write a message to the log file for a specific player."""
    timestamp = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
    filename = os.path.join(LOG_DIR, f"bingo-Spieler{player_num}.txt")
    with open(filename, 'a') as log_file:
        log_file.write(message + "\n")

# Saves all player logs to a single file
def save_logs_to_file():
    """Save all player logs to a single file."""
    log_files = [f for f in os.listdir(LOG_DIR) if f.endswith('.txt') and f.startswith('bingo-Spieler')]

    if not log_files:
        print("Keine Log-Dateien gefunden.")
        return

    with open(os.path.join(LOG_DIR, 'Log-Datei.txt'), 'w') as output_file:
        output_file.write("Zusammengeführte Log-Datei\n")
        output_file.write("=" * 50 + "\n\n")

        for log_file in log_files:
            output_file.write(f"Log-Datei: {log_file}\n")
            output_file.write("=" * 50 + "\n")
            with open(os.path.join(LOG_DIR, log_file), 'r') as input_file:
                output_file.write(input_file.read())
            output_file.write("\n\n")

def main():
    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)

    welcome_screen()
    loading_animation()
    print("\nDas Programm ist fertig geladen!")

    words_from_file = read_words_from_file(args.wordfile)
    if len(words_from_file) < args.xaxis * args.yaxis:
        print("Fehler: Nicht genug Wörter in der Datei.")
        sys.exit(1)

    num_players = int(input("Wie viele Spieler nehmen teil? "))

    if num_players < 2:
        print("Mindestens zwei Spieler werden benötigt.")
        sys.exit(1)

    parent_conns = []
    child_conns = []
    players = []

    for i in range(num_players):
        parent_conn, child_conn = Pipe()
        parent_conns.append(parent_conn)
        child_conns.append(child_conn)

        player_name = input(f"Geben Sie den Namen des Spielers {i + 1} ein: ")
        # player_age = input(f"Geben Sie das Alter des Spielers {i + 1} ein: ")

        players.append((player_name, None))  # Don't ask for age

    processes = []
    cards = []

    for i in range(num_players):
        p = Process(target=player_process, args=(child_conns[i], i + 1, args.xaxis, args.yaxis, words_from_file))
        processes.append(p)
        p.start()

        parent_conns[i].send(players[i])
        card = parent_conns[i].recv()
        cards.append(card)

        print(f"\nSpieler {i + 1} ({players[i][0]}) Bingokarte:")
        print_bingo_card(card)

    random.shuffle(words_from_file)
    for word in words_from_file:
        for i in range(num_players):
            parent_conns[i].send(word)

            response = input(f"Spieler {i + 1}, hast du das Wort '{word}'? (j/n) ")
            parent_conns[i].send(response)

            result = parent_conns[i].recv()
            if isinstance(result, tuple) and len(result) >= 3:
                player_num, word, win, mark_row, mark_col = result[:5]
                if win:
                    print(f"\nSpieler {player_num} ({players[player_num - 1][0]}) hat gewonnen!")
                    write_to_log(player_num, f"{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')} Sieg")
                    parent_conns[player_num - 1].send(None)

                    if parent_conns[player_num - 1].poll():
                        winner_card = parent_conns[player_num - 1].recv()
                        print(f"\nAktualisierte Gewinnerkarte für Spieler {player_num} ({players[player_num - 1][0]}):")
                        print_bingo_card(winner_card)
                    else:
                        print(f"Die Verbindung zu Spieler {player_num} wurde geschlossen. Kann keine Gewinnerkarte empfangen.")

                    for i in range(num_players):
                        write_to_log(i + 1, f"{datetime.now().strftime('%Y-%m-%d-%H-%M-%S')} Ende des Spiels")

                    for p in processes:
                        p.terminate()
                    save_logs_to_file()
                    sys.exit(0)

        for i in range(num_players):
            updated_card = parent_conns[i].recv()
            cards[i] = updated_card
            print(f"\nAktualisierte Bingokarte für Spieler {i + 1} ({players[i][0]}):")
            print_bingo_card(updated_card)

    for p in processes:
        p.join()

    save_logs_to_file()
    print("Log-Dateien wurden erfolgreich in 'Log-Datei.txt' gespeichert.")



if __name__ == "__main__":
    main()
